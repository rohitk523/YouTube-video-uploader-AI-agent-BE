services:
  # FastAPI Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube-shorts-backend
    restart: unless-stopped
    env_file:
      - .env.dev
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./static:/app/static
      - ./logs:/app/logs
    networks:
      - youtube-shorts-network
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # postgres:
  #   image: postgres:15-alpine
  #   container_name: youtube-shorts-postgres
  #   restart: unless-stopped
  #   env_file:
  #     - .env.dev
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB:-youtube_shorts_dev}
  #     POSTGRES_USER: ${POSTGRES_USER:-dev_user}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #   ports:
  #     - "${POSTGRES_PORT:-5432}:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init-scripts:/docker-entrypoint-initdb.d
  #   networks:
  #     - youtube-shorts-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-youtube_shorts}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  redis:
    image: redis:7-alpine
    container_name: youtube-shorts-redis
    restart: unless-stopped
    env_file:
      - .env.dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - youtube-shorts-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_password}

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: youtube-shorts-redis-commander
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      REDIS_HOSTS: local:youtube-shorts-redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - youtube-shorts-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - tools

  # Optional: pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: youtube-shorts-pgadmin
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - youtube-shorts-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  youtube-shorts-network:
    driver: bridge 